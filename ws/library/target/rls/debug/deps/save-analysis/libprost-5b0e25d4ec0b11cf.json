{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0","program":"/home/newslab/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","prost","--edition=2018","/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata,link","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"prost-derive\"","-C","metadata=5b0e25d4ec0b11cf","-C","extra-filename=-5b0e25d4ec0b11cf","--out-dir","/home/newslab/rust_practice/ws/library/target/rls/debug/deps","-L","dependency=/home/newslab/rust_practice/ws/library/target/rls/debug/deps","--extern","byteorder=/home/newslab/rust_practice/ws/library/target/rls/debug/deps/libbyteorder-56460b1d02bae5d5.rmeta","--extern","bytes=/home/newslab/rust_practice/ws/library/target/rls/debug/deps/libbytes-c29310ac139c099c.rmeta","--extern","prost_derive=/home/newslab/rust_practice/ws/library/target/rls/debug/deps/libprost_derive-37d126dc889bbdb6.so","--cap-lints","allow","--error-format=json","--sysroot","/home/newslab/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/newslab/rust_practice/ws/library/target/rls/debug/deps/libprost-5b0e25d4ec0b11cf.rmeta"},"prelude":{"crate_id":{"name":"prost","disambiguator":[15719899125529716765,0]},"crate_root":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src","external_crates":[{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[14026078687029744792,0]}},{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[5443730852259234579,0]}},{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[4162025702538114948,0]}},{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[17612152343462746361,0]}},{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[5560808256873132085,0]}},{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[135160560163186024,0]}},{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[5800521777261530329,0]}},{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[7095478770525139037,0]}},{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[17225897750877482818,0]}},{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[15613653607383163471,0]}},{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[12428323400248712701,0]}},{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[11893279639181573711,0]}},{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[13583305032161054644,0]}},{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[16609837797022023111,0]}},{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[18098459435141129808,0]}},{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[15244551393771456017,0]}},{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[6576340271055396708,0]}},{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","num":18,"id":{"name":"adler","disambiguator":[15284510821186066958,0]}},{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[12982807908830018159,0]}},{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","num":20,"id":{"name":"prost_derive","disambiguator":[16208008176842508190,0]}},{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/message.rs","num":21,"id":{"name":"bytes","disambiguator":[12152782766538150761,0]}},{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/message.rs","num":22,"id":{"name":"byteorder","disambiguator":[12346703004895631807,0]}},{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/message.rs","num":23,"id":{"name":"iovec","disambiguator":[141615001635512939,0]}},{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/message.rs","num":24,"id":{"name":"libc","disambiguator":[939024296648786786,0]}}],"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","byte_start":0,"byte_end":2551,"line_start":1,"line_end":80,"column_start":1,"column_end":25}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":298},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","byte_start":149,"byte_end":160,"line_start":10,"line_end":10,"column_start":24,"column_end":35},"alias_span":null,"name":"DecodeError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":312},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","byte_start":162,"byte_end":173,"line_start":10,"line_end":10,"column_start":37,"column_end":48},"alias_span":null,"name":"EncodeError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":60},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","byte_start":200,"byte_end":207,"line_start":11,"line_end":11,"column_start":25,"column_end":32},"alias_span":null,"name":"Message","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","byte_start":2549,"byte_end":2550,"line_start":80,"line_end":80,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"Message","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","byte_start":0,"byte_end":2551,"line_start":1,"line_end":80,"column_start":1,"column_end":25},"name":"","qualname":"::","value":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":36},{"krate":0,"index":88},{"krate":0,"index":173},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":268},{"krate":0,"index":271},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":278},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":285},{"krate":0,"index":288},{"krate":0,"index":291},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":296},{"krate":0,"index":297}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":298},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/error.rs","byte_start":2985,"byte_end":2996,"line_start":14,"line_end":14,"column_start":12,"column_end":23},"name":"DecodeError","qualname":"::error::DecodeError","value":"DecodeError {  }","parent":null,"children":[{"krate":0,"index":299},{"krate":0,"index":300}],"decl_id":null,"docs":" A Protobuf message decoding error.","sig":null,"attributes":[{"value":"/ A Protobuf message decoding error.","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/error.rs","byte_start":2663,"byte_end":2701,"line_start":8,"line_end":8,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/error.rs","byte_start":2702,"byte_end":2705,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ `DecodeError` indicates that the input buffer does not caontain a valid","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/error.rs","byte_start":2706,"byte_end":2781,"line_start":10,"line_end":10,"column_start":1,"column_end":76}},{"value":"/ Protobuf message. The error details should be considered 'best effort': in","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/error.rs","byte_start":2782,"byte_end":2860,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/ general it is not possible to exactly pinpoint why data is malformed.","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/error.rs","byte_start":2861,"byte_end":2934,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":17},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/error.rs","byte_start":3518,"byte_end":3521,"line_start":28,"line_end":28,"column_start":12,"column_end":15},"name":"new","qualname":"<DecodeError>::new","value":"pub fn new<S>(S) -> DecodeError where S: Into<Cow>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `DecodeError` with a 'best effort' root cause description.","sig":null,"attributes":[{"value":"/ Creates a new `DecodeError` with a 'best effort' root cause description.","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/error.rs","byte_start":3343,"byte_end":3419,"line_start":24,"line_end":24,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/error.rs","byte_start":3424,"byte_end":3427,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ Meant to be used only by `Message` implementations.","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/error.rs","byte_start":3432,"byte_end":3487,"line_start":26,"line_end":26,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/error.rs","byte_start":3900,"byte_end":3904,"line_start":42,"line_end":42,"column_start":12,"column_end":16},"name":"push","qualname":"<DecodeError>::push","value":"pub fn push(&mut Self, &'static str, &'static str)","parent":null,"children":[],"decl_id":null,"docs":" Pushes a (message, field) name location pair on to the location stack.","sig":null,"attributes":[{"value":"/ Pushes a (message, field) name location pair on to the location stack.","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/error.rs","byte_start":3727,"byte_end":3801,"line_start":38,"line_end":38,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/error.rs","byte_start":3806,"byte_end":3809,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ Meant to be used only by `Message` implementations.","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/error.rs","byte_start":3814,"byte_end":3869,"line_start":40,"line_end":40,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":312},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/error.rs","byte_start":4861,"byte_end":4872,"line_start":75,"line_end":75,"column_start":12,"column_end":23},"name":"EncodeError","qualname":"::error::EncodeError","value":"EncodeError {  }","parent":null,"children":[{"krate":0,"index":313},{"krate":0,"index":314}],"decl_id":null,"docs":" A Protobuf message encoding error.","sig":null,"attributes":[{"value":"/ A Protobuf message encoding error.","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/error.rs","byte_start":4590,"byte_end":4628,"line_start":69,"line_end":69,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/error.rs","byte_start":4629,"byte_end":4632,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ `EncodeError` always indicates that a message failed to encode because the","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/error.rs","byte_start":4633,"byte_end":4711,"line_start":71,"line_end":71,"column_start":1,"column_end":79}},{"value":"/ provided buffer had insufficient capacity. Message encoding is otherwise","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/error.rs","byte_start":4712,"byte_end":4788,"line_start":72,"line_end":72,"column_start":1,"column_end":77}},{"value":"/ infallible.","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/error.rs","byte_start":4789,"byte_end":4804,"line_start":73,"line_end":73,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/error.rs","byte_start":5214,"byte_end":5231,"line_start":90,"line_end":90,"column_start":12,"column_end":29},"name":"required_capacity","qualname":"<EncodeError>::required_capacity","value":"pub fn required_capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the required buffer capacity to encode the message.\n","sig":null,"attributes":[{"value":"/ Returns the required buffer capacity to encode the message.","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/error.rs","byte_start":5139,"byte_end":5202,"line_start":89,"line_end":89,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/error.rs","byte_start":5375,"byte_end":5384,"line_start":95,"line_end":95,"column_start":12,"column_end":21},"name":"remaining","qualname":"<EncodeError>::remaining","value":"pub fn remaining(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the remaining length in the provided buffer at the time of encoding.\n","sig":null,"attributes":[{"value":"/ Returns the remaining length in the provided buffer at the time of encoding.","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/error.rs","byte_start":5283,"byte_end":5363,"line_start":94,"line_end":94,"column_start":5,"column_end":85}}]},{"kind":"Trait","id":{"krate":0,"index":60},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/message.rs","byte_start":6227,"byte_end":6234,"line_start":11,"line_end":11,"column_start":11,"column_end":18},"name":"Message","qualname":"::message::Message","value":"Message: Debug + Send + Sync","parent":null,"children":[{"krate":0,"index":61},{"krate":0,"index":63},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":75},{"krate":0,"index":77},{"krate":0,"index":79}],"decl_id":null,"docs":" A Protocol Buffers message.\n","sig":null,"attributes":[{"value":"/ A Protocol Buffers message.","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/message.rs","byte_start":6185,"byte_end":6216,"line_start":10,"line_end":10,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/message.rs","byte_start":6473,"byte_end":6483,"line_start":18,"line_end":18,"column_start":8,"column_end":18},"name":"encode_raw","qualname":"::message::Message::encode_raw","value":"pub fn encode_raw<B>(&Self, &mut B) where B: BufMut, Self: Sized","parent":{"krate":0,"index":60},"children":[],"decl_id":null,"docs":" Encodes the message to a buffer.","sig":null,"attributes":[{"value":"/ Encodes the message to a buffer.","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/message.rs","byte_start":6262,"byte_end":6298,"line_start":12,"line_end":12,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/message.rs","byte_start":6303,"byte_end":6306,"line_start":13,"line_end":13,"column_start":5,"column_end":8}},{"value":"/ This method will panic if the buffer has insufficient capacity.","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/message.rs","byte_start":6311,"byte_end":6378,"line_start":14,"line_end":14,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/message.rs","byte_start":6383,"byte_end":6386,"line_start":15,"line_end":15,"column_start":5,"column_end":8}},{"value":"/ Meant to be used only by `Message` implementations.","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/message.rs","byte_start":6391,"byte_end":6446,"line_start":16,"line_end":16,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/message.rs","byte_start":6718,"byte_end":6729,"line_start":27,"line_end":27,"column_start":8,"column_end":19},"name":"merge_field","qualname":"::message::Message::merge_field","value":"pub fn merge_field<B>(&mut Self, &mut B) -> Result<(), DecodeError> where\nB: Buf, Self: Sized","parent":{"krate":0,"index":60},"children":[],"decl_id":null,"docs":" Decodes a field from a buffer, and merges it into `self`.","sig":null,"attributes":[{"value":"/ Decodes a field from a buffer, and merges it into `self`.","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/message.rs","byte_start":6562,"byte_end":6623,"line_start":23,"line_end":23,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/message.rs","byte_start":6628,"byte_end":6631,"line_start":24,"line_end":24,"column_start":5,"column_end":8}},{"value":"/ Meant to be used only by `Message` implementations.","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/message.rs","byte_start":6636,"byte_end":6691,"line_start":25,"line_end":25,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/message.rs","byte_start":6917,"byte_end":6928,"line_start":33,"line_end":33,"column_start":8,"column_end":19},"name":"encoded_len","qualname":"::message::Message::encoded_len","value":"pub fn encoded_len(&Self) -> usize","parent":{"krate":0,"index":60},"children":[],"decl_id":null,"docs":" Returns the encoded length of the message without a length delimiter.\n","sig":null,"attributes":[{"value":"/ Returns the encoded length of the message without a length delimiter.","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/message.rs","byte_start":6836,"byte_end":6909,"line_start":32,"line_end":32,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/message.rs","byte_start":7086,"byte_end":7092,"line_start":38,"line_end":38,"column_start":8,"column_end":14},"name":"encode","qualname":"::message::Message::encode","value":"pub fn encode<B>(&Self, &mut B) -> Result<(), EncodeError> where B: BufMut,\nSelf: Sized","parent":{"krate":0,"index":60},"children":[],"decl_id":null,"docs":" Encodes the message to a buffer.","sig":null,"attributes":[{"value":"/ Encodes the message to a buffer.","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/message.rs","byte_start":6951,"byte_end":6987,"line_start":35,"line_end":35,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/message.rs","byte_start":6992,"byte_end":6995,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ An error will be returned if the buffer does not have sufficient capacity.","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/message.rs","byte_start":7000,"byte_end":7078,"line_start":37,"line_end":37,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/message.rs","byte_start":7620,"byte_end":7643,"line_start":56,"line_end":56,"column_start":8,"column_end":31},"name":"encode_length_delimited","qualname":"::message::Message::encode_length_delimited","value":"pub fn encode_length_delimited<B>(&Self, &mut B) -> Result<(), EncodeError>\nwhere B: BufMut, Self: Sized","parent":{"krate":0,"index":60},"children":[],"decl_id":null,"docs":" Encodes the message with a length-delimiter to a buffer.","sig":null,"attributes":[{"value":"/ Encodes the message with a length-delimiter to a buffer.","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/message.rs","byte_start":7461,"byte_end":7521,"line_start":53,"line_end":53,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/message.rs","byte_start":7526,"byte_end":7529,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ An error will be returned if the buffer does not have sufficient capacity.","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/message.rs","byte_start":7534,"byte_end":7612,"line_start":55,"line_end":55,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/message.rs","byte_start":8210,"byte_end":8216,"line_start":75,"line_end":75,"column_start":8,"column_end":14},"name":"decode","qualname":"::message::Message::decode","value":"pub fn decode<B>(B) -> Result<Self, DecodeError> where B: IntoBuf,\nSelf: Default","parent":{"krate":0,"index":60},"children":[],"decl_id":null,"docs":" Decodes an instance of the message from a buffer.","sig":null,"attributes":[{"value":"/ Decodes an instance of the message from a buffer.","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/message.rs","byte_start":8097,"byte_end":8150,"line_start":72,"line_end":72,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/message.rs","byte_start":8155,"byte_end":8158,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ The entire buffer will be consumed.","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/message.rs","byte_start":8163,"byte_end":8202,"line_start":74,"line_end":74,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/message.rs","byte_start":8521,"byte_end":8544,"line_start":85,"line_end":85,"column_start":8,"column_end":31},"name":"decode_length_delimited","qualname":"::message::Message::decode_length_delimited","value":"pub fn decode_length_delimited<B>(B) -> Result<Self, DecodeError> where\nB: IntoBuf, Self: Default","parent":{"krate":0,"index":60},"children":[],"decl_id":null,"docs":" Decodes a length-delimited instance of the message from the buffer.\n","sig":null,"attributes":[{"value":"/ Decodes a length-delimited instance of the message from the buffer.","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/message.rs","byte_start":8442,"byte_end":8513,"line_start":84,"line_end":84,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/message.rs","byte_start":8904,"byte_end":8909,"line_start":98,"line_end":98,"column_start":8,"column_end":13},"name":"merge","qualname":"::message::Message::merge","value":"pub fn merge<B>(&mut Self, B) -> Result<(), DecodeError> where B: IntoBuf,\nSelf: Sized","parent":{"krate":0,"index":60},"children":[],"decl_id":null,"docs":" Decodes an instance of the message from a buffer, and merges it into `self`.","sig":null,"attributes":[{"value":"/ Decodes an instance of the message from a buffer, and merges it into `self`.","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/message.rs","byte_start":8764,"byte_end":8844,"line_start":95,"line_end":95,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/message.rs","byte_start":8849,"byte_end":8852,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ The entire buffer will be consumed.","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/message.rs","byte_start":8857,"byte_end":8896,"line_start":97,"line_end":97,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/message.rs","byte_start":9277,"byte_end":9299,"line_start":112,"line_end":112,"column_start":8,"column_end":30},"name":"merge_length_delimited","qualname":"::message::Message::merge_length_delimited","value":"pub fn merge_length_delimited<B>(&mut Self, B) -> Result<(), DecodeError>\nwhere B: IntoBuf, Self: Sized","parent":{"krate":0,"index":60},"children":[],"decl_id":null,"docs":" Decodes a length-delimited instance of the message from buffer, and\n merges it into `self`.\n","sig":null,"attributes":[{"value":"/ Decodes a length-delimited instance of the message from buffer, and","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/message.rs","byte_start":9167,"byte_end":9238,"line_start":110,"line_end":110,"column_start":5,"column_end":76}},{"value":"/ merges it into `self`.","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/message.rs","byte_start":9243,"byte_end":9269,"line_start":111,"line_end":111,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/message.rs","byte_start":9564,"byte_end":9569,"line_start":121,"line_end":121,"column_start":8,"column_end":13},"name":"clear","qualname":"::message::Message::clear","value":"pub fn clear(&mut Self)","parent":{"krate":0,"index":60},"children":[],"decl_id":null,"docs":" Clears the message, resetting all fields to their default.\n","sig":null,"attributes":[{"value":"/ Clears the message, resetting all fields to their default.","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/message.rs","byte_start":9494,"byte_end":9556,"line_start":120,"line_end":120,"column_start":5,"column_end":67}}]},{"kind":"Mod","id":{"krate":0,"index":173},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"encoding","qualname":"::encoding","value":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","parent":null,"children":[{"krate":0,"index":174},{"krate":0,"index":177},{"krate":0,"index":180},{"krate":0,"index":183},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":190},{"krate":0,"index":193},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":199},{"krate":0,"index":201},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":206},{"krate":0,"index":327},{"krate":0,"index":340},{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":211},{"krate":0,"index":213},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":221},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":348},{"krate":0,"index":367},{"krate":0,"index":386},{"krate":0,"index":405},{"krate":0,"index":424},{"krate":0,"index":443},{"krate":0,"index":462},{"krate":0,"index":227},{"krate":0,"index":481},{"krate":0,"index":497},{"krate":0,"index":513},{"krate":0,"index":529},{"krate":0,"index":545},{"krate":0,"index":561},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":236},{"krate":0,"index":242},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263}],"decl_id":null,"docs":" Utility functions and types for encoding and decoding Protobuf types.","sig":null,"attributes":[{"value":"/ Utility functions and types for encoding and decoding Protobuf types.","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":17298,"byte_end":17371,"line_start":1,"line_end":1,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":17372,"byte_end":17375,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Meant to be used only from `Message` implementations.","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":17376,"byte_end":17433,"line_start":3,"line_end":3,"column_start":1,"column_end":58}}]},{"kind":"Function","id":{"krate":0,"index":199},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":17752,"byte_end":17765,"line_start":18,"line_end":18,"column_start":8,"column_end":21},"name":"encode_varint","qualname":"::encoding::encode_varint","value":"pub fn encode_varint<B>(u64, &mut B) where B: BufMut","parent":null,"children":[],"decl_id":null,"docs":" Encodes an integer value into LEB128 variable length format, and writes it to the buffer.\n The buffer must have enough remaining space (maximum 10 bytes).\n","sig":null,"attributes":[{"value":"/ Encodes an integer value into LEB128 variable length format, and writes it to the buffer.","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":17573,"byte_end":17666,"line_start":15,"line_end":15,"column_start":1,"column_end":94}},{"value":"/ The buffer must have enough remaining space (maximum 10 bytes).","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":17667,"byte_end":17734,"line_start":16,"line_end":16,"column_start":1,"column_end":68}},{"value":"inline","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":17735,"byte_end":17744,"line_start":17,"line_end":17,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":201},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":18829,"byte_end":18842,"line_start":57,"line_end":57,"column_start":8,"column_end":21},"name":"decode_varint","qualname":"::encoding::decode_varint","value":"pub fn decode_varint<B>(&mut B) -> Result<u64, DecodeError> where B: Buf","parent":null,"children":[],"decl_id":null,"docs":" Decodes a LEB128-encoded variable length integer from the buffer.\n","sig":null,"attributes":[{"value":"/ Decodes a LEB128-encoded variable length integer from the buffer.","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":18752,"byte_end":18821,"line_start":56,"line_end":56,"column_start":1,"column_end":70}}]},{"kind":"Function","id":{"krate":0,"index":206},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":22249,"byte_end":22267,"line_start":184,"line_end":184,"column_start":8,"column_end":26},"name":"encoded_len_varint","qualname":"::encoding::encoded_len_varint","value":"pub fn encoded_len_varint(u64) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the encoded length of the value in LEB128 variable length format.\n The returned value will be between 1 and 10, inclusive.\n","sig":null,"attributes":[{"value":"/ Returns the encoded length of the value in LEB128 variable length format.","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":22094,"byte_end":22171,"line_start":181,"line_end":181,"column_start":1,"column_end":78}},{"value":"/ The returned value will be between 1 and 10, inclusive.","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":22172,"byte_end":22231,"line_start":182,"line_end":182,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":22232,"byte_end":22241,"line_start":183,"line_end":183,"column_start":1,"column_end":10}}]},{"kind":"TupleVariant","id":{"krate":0,"index":328},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":22580,"byte_end":22586,"line_start":193,"line_end":193,"column_start":5,"column_end":11},"name":"Varint","qualname":"::encoding::WireType::Varint","value":"WireType::Varint","parent":{"krate":0,"index":327},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":331},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":22596,"byte_end":22608,"line_start":194,"line_end":194,"column_start":5,"column_end":17},"name":"SixtyFourBit","qualname":"::encoding::WireType::SixtyFourBit","value":"WireType::SixtyFourBit","parent":{"krate":0,"index":327},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":334},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":22618,"byte_end":22633,"line_start":195,"line_end":195,"column_start":5,"column_end":20},"name":"LengthDelimited","qualname":"::encoding::WireType::LengthDelimited","value":"WireType::LengthDelimited","parent":{"krate":0,"index":327},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":337},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":22643,"byte_end":22655,"line_start":196,"line_end":196,"column_start":5,"column_end":17},"name":"ThirtyTwoBit","qualname":"::encoding::WireType::ThirtyTwoBit","value":"WireType::ThirtyTwoBit","parent":{"krate":0,"index":327},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":327},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":22565,"byte_end":22573,"line_start":192,"line_end":192,"column_start":10,"column_end":18},"name":"WireType","qualname":"::encoding::WireType","value":"pub enum WireType {\n    Varint = ,\n    SixtyFourBit = ,\n    LengthDelimited = ,\n    ThirtyTwoBit = ,\n}","parent":null,"children":[{"krate":0,"index":328},{"krate":0,"index":331},{"krate":0,"index":334},{"krate":0,"index":337}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"repr(u8)","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":22544,"byte_end":22555,"line_start":191,"line_end":191,"column_start":1,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":207},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":22674,"byte_end":22681,"line_start":199,"line_end":199,"column_start":11,"column_end":18},"name":"MIN_TAG","qualname":"::encoding::MIN_TAG","value":"u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":208},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":22702,"byte_end":22709,"line_start":200,"line_end":200,"column_start":11,"column_end":18},"name":"MAX_TAG","qualname":"::encoding::MAX_TAG","value":"u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":22817,"byte_end":22825,"line_start":205,"line_end":205,"column_start":12,"column_end":20},"name":"try_from","qualname":"<WireType>::try_from","value":"pub fn try_from(u8) -> Result<WireType, DecodeError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":22796,"byte_end":22805,"line_start":204,"line_end":204,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":211},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":23332,"byte_end":23342,"line_start":222,"line_end":222,"column_start":8,"column_end":18},"name":"encode_key","qualname":"::encoding::encode_key","value":"pub fn encode_key<B>(u32, WireType, &mut B) where B: BufMut","parent":null,"children":[],"decl_id":null,"docs":" Encodes a Protobuf field key, which consists of a wire type designator and\n the field tag.\n","sig":null,"attributes":[{"value":"/ Encodes a Protobuf field key, which consists of a wire type designator and","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":23217,"byte_end":23295,"line_start":219,"line_end":219,"column_start":1,"column_end":79}},{"value":"/ the field tag.","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":23296,"byte_end":23314,"line_start":220,"line_end":220,"column_start":1,"column_end":19}},{"value":"inline","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":23315,"byte_end":23324,"line_start":221,"line_end":221,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":213},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":23669,"byte_end":23679,"line_start":234,"line_end":234,"column_start":8,"column_end":18},"name":"decode_key","qualname":"::encoding::decode_key","value":"pub fn decode_key<B>(&mut B) -> Result<(u32, WireType), DecodeError> where\nB: Buf","parent":null,"children":[],"decl_id":null,"docs":" Decodes a Protobuf field key, which consists of a wire type designator and\n the field tag.\n","sig":null,"attributes":[{"value":"/ Decodes a Protobuf field key, which consists of a wire type designator and","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":23554,"byte_end":23632,"line_start":231,"line_end":231,"column_start":1,"column_end":79}},{"value":"/ the field tag.","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":23633,"byte_end":23651,"line_start":232,"line_end":232,"column_start":1,"column_end":19}},{"value":"inline","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":23652,"byte_end":23661,"line_start":233,"line_end":233,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":215},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":24278,"byte_end":24285,"line_start":255,"line_end":255,"column_start":8,"column_end":15},"name":"key_len","qualname":"::encoding::key_len","value":"pub fn key_len(u32) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the width of an encoded Protobuf field key with the given tag.\n The returned width will be between 1 and 5 bytes (inclusive).\n","sig":null,"attributes":[{"value":"/ Returns the width of an encoded Protobuf field key with the given tag.","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":24120,"byte_end":24194,"line_start":252,"line_end":252,"column_start":1,"column_end":75}},{"value":"/ The returned width will be between 1 and 5 bytes (inclusive).","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":24195,"byte_end":24260,"line_start":253,"line_end":253,"column_start":1,"column_end":66}},{"value":"inline","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":24261,"byte_end":24270,"line_start":254,"line_end":254,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":216},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":24472,"byte_end":24487,"line_start":262,"line_end":262,"column_start":8,"column_end":23},"name":"check_wire_type","qualname":"::encoding::check_wire_type","value":"pub fn check_wire_type(WireType, WireType) -> Result<(), DecodeError>","parent":null,"children":[],"decl_id":null,"docs":" Checks that the expected wire type matches the actual wire type,\n or returns an error result.\n","sig":null,"attributes":[{"value":"/ Checks that the expected wire type matches the actual wire type,","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":24354,"byte_end":24422,"line_start":259,"line_end":259,"column_start":1,"column_end":69}},{"value":"/ or returns an error result.","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":24423,"byte_end":24454,"line_start":260,"line_end":260,"column_start":1,"column_end":32}},{"value":"inline","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":24455,"byte_end":24464,"line_start":261,"line_end":261,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":217},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":24894,"byte_end":24904,"line_start":274,"line_end":274,"column_start":8,"column_end":18},"name":"merge_loop","qualname":"::encoding::merge_loop","value":"pub fn merge_loop<T, M, B>(&mut T, &mut B, M) -> Result<(), DecodeError> where\nM: FnMut(&mut T, &mut B) -> Result<(), DecodeError>, B: Buf","parent":null,"children":[],"decl_id":null,"docs":" Helper function which abstracts reading a length delimiter prefix followed\n by decoding values until the length of bytes is exhausted.\n","sig":null,"attributes":[{"value":"/ Helper function which abstracts reading a length delimiter prefix followed","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":24745,"byte_end":24823,"line_start":272,"line_end":272,"column_start":1,"column_end":79}},{"value":"/ by decoding values until the length of bytes is exhausted.","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":24824,"byte_end":24886,"line_start":273,"line_end":273,"column_start":1,"column_end":63}}]},{"kind":"Function","id":{"krate":0,"index":221},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":25470,"byte_end":25480,"line_start":296,"line_end":296,"column_start":8,"column_end":18},"name":"skip_field","qualname":"::encoding::skip_field","value":"pub fn skip_field<B>(WireType, &mut B) -> Result<(), DecodeError> where B: Buf","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":348},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":31285,"byte_end":31289,"line_start":467,"line_end":467,"column_start":15,"column_end":19},"name":"bool","qualname":"::encoding::bool","value":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","parent":null,"children":[{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":352},{"krate":0,"index":362},{"krate":0,"index":354},{"krate":0,"index":364},{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":360}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":367},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":31403,"byte_end":31408,"line_start":470,"line_end":470,"column_start":14,"column_end":19},"name":"int32","qualname":"::encoding::int32","value":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","parent":null,"children":[{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":371},{"krate":0,"index":381},{"krate":0,"index":373},{"krate":0,"index":383},{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":379}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":386},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":31424,"byte_end":31429,"line_start":471,"line_end":471,"column_start":14,"column_end":19},"name":"int64","qualname":"::encoding::int64","value":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","parent":null,"children":[{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":390},{"krate":0,"index":400},{"krate":0,"index":392},{"krate":0,"index":402},{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":398}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":405},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":31445,"byte_end":31451,"line_start":472,"line_end":472,"column_start":14,"column_end":20},"name":"uint32","qualname":"::encoding::uint32","value":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","parent":null,"children":[{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":409},{"krate":0,"index":419},{"krate":0,"index":411},{"krate":0,"index":421},{"krate":0,"index":414},{"krate":0,"index":415},{"krate":0,"index":417}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":424},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":31467,"byte_end":31473,"line_start":473,"line_end":473,"column_start":14,"column_end":20},"name":"uint64","qualname":"::encoding::uint64","value":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","parent":null,"children":[{"krate":0,"index":425},{"krate":0,"index":426},{"krate":0,"index":428},{"krate":0,"index":438},{"krate":0,"index":430},{"krate":0,"index":440},{"krate":0,"index":433},{"krate":0,"index":434},{"krate":0,"index":436}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":443},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":31489,"byte_end":31495,"line_start":474,"line_end":474,"column_start":14,"column_end":20},"name":"sint32","qualname":"::encoding::sint32","value":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","parent":null,"children":[{"krate":0,"index":444},{"krate":0,"index":445},{"krate":0,"index":447},{"krate":0,"index":457},{"krate":0,"index":449},{"krate":0,"index":459},{"krate":0,"index":452},{"krate":0,"index":453},{"krate":0,"index":455}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":462},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":31744,"byte_end":31750,"line_start":482,"line_end":482,"column_start":14,"column_end":20},"name":"sint64","qualname":"::encoding::sint64","value":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","parent":null,"children":[{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":466},{"krate":0,"index":476},{"krate":0,"index":468},{"krate":0,"index":478},{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":474}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":481},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":35412,"byte_end":35417,"line_start":598,"line_end":598,"column_start":5,"column_end":10},"name":"float","qualname":"::encoding::float","value":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","parent":null,"children":[{"krate":0,"index":482},{"krate":0,"index":483},{"krate":0,"index":485},{"krate":0,"index":492},{"krate":0,"index":487},{"krate":0,"index":494},{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":491}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":497},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":35515,"byte_end":35521,"line_start":606,"line_end":606,"column_start":5,"column_end":11},"name":"double","qualname":"::encoding::double","value":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","parent":null,"children":[{"krate":0,"index":498},{"krate":0,"index":499},{"krate":0,"index":501},{"krate":0,"index":508},{"krate":0,"index":503},{"krate":0,"index":510},{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":513},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":35619,"byte_end":35626,"line_start":614,"line_end":614,"column_start":5,"column_end":12},"name":"fixed32","qualname":"::encoding::fixed32","value":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","parent":null,"children":[{"krate":0,"index":514},{"krate":0,"index":515},{"krate":0,"index":517},{"krate":0,"index":524},{"krate":0,"index":519},{"krate":0,"index":526},{"krate":0,"index":521},{"krate":0,"index":522},{"krate":0,"index":523}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":529},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":35724,"byte_end":35731,"line_start":622,"line_end":622,"column_start":5,"column_end":12},"name":"fixed64","qualname":"::encoding::fixed64","value":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","parent":null,"children":[{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":533},{"krate":0,"index":540},{"krate":0,"index":535},{"krate":0,"index":542},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":545},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":35829,"byte_end":35837,"line_start":630,"line_end":630,"column_start":5,"column_end":13},"name":"sfixed32","qualname":"::encoding::sfixed32","value":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","parent":null,"children":[{"krate":0,"index":546},{"krate":0,"index":547},{"krate":0,"index":549},{"krate":0,"index":556},{"krate":0,"index":551},{"krate":0,"index":558},{"krate":0,"index":553},{"krate":0,"index":554},{"krate":0,"index":555}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":561},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":35935,"byte_end":35943,"line_start":638,"line_end":638,"column_start":5,"column_end":13},"name":"sfixed64","qualname":"::encoding::sfixed64","value":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","parent":null,"children":[{"krate":0,"index":562},{"krate":0,"index":563},{"krate":0,"index":565},{"krate":0,"index":572},{"krate":0,"index":567},{"krate":0,"index":574},{"krate":0,"index":569},{"krate":0,"index":570},{"krate":0,"index":571}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":229},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":37907,"byte_end":37913,"line_start":699,"line_end":699,"column_start":9,"column_end":15},"name":"string","qualname":"::encoding::string","value":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","parent":null,"children":[{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":233},{"krate":0,"index":582},{"krate":0,"index":577},{"krate":0,"index":579},{"krate":0,"index":580}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":231},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":37946,"byte_end":37952,"line_start":702,"line_end":702,"column_start":12,"column_end":18},"name":"encode","qualname":"::encoding::string::encode","value":"pub fn encode<B>(u32, &String, &mut B) where B: BufMut","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":233},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":38193,"byte_end":38198,"line_start":710,"line_end":710,"column_start":12,"column_end":17},"name":"merge","qualname":"::encoding::string::merge","value":"pub fn merge<B>(WireType, &mut String, &mut B) -> Result<(), DecodeError>\nwhere B: Buf","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":236},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":38840,"byte_end":38845,"line_start":728,"line_end":728,"column_start":9,"column_end":14},"name":"bytes","qualname":"::encoding::bytes","value":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","parent":null,"children":[{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":240},{"krate":0,"index":589},{"krate":0,"index":584},{"krate":0,"index":586},{"krate":0,"index":587}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":238},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":38878,"byte_end":38884,"line_start":731,"line_end":731,"column_start":12,"column_end":18},"name":"encode","qualname":"::encoding::bytes::encode","value":"pub fn encode<B>(u32, &Vec<u8>, &mut B) where B: BufMut","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":240},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":39116,"byte_end":39121,"line_start":740,"line_end":740,"column_start":12,"column_end":17},"name":"merge","qualname":"::encoding::bytes::merge","value":"pub fn merge<B>(WireType, &mut Vec<u8>, &mut B) -> Result<(), DecodeError>\nwhere B: Buf","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":242},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":40026,"byte_end":40033,"line_start":773,"line_end":773,"column_start":9,"column_end":16},"name":"message","qualname":"::encoding::message","value":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","parent":null,"children":[{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":247},{"krate":0,"index":250},{"krate":0,"index":253},{"krate":0,"index":256},{"krate":0,"index":258}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":244},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":40066,"byte_end":40072,"line_start":776,"line_end":776,"column_start":12,"column_end":18},"name":"encode","qualname":"::encoding::message::encode","value":"pub fn encode<M, B>(u32, &M, &mut B) where M: Message, B: BufMut","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":247},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":40324,"byte_end":40329,"line_start":786,"line_end":786,"column_start":12,"column_end":17},"name":"merge","qualname":"::encoding::message::merge","value":"pub fn merge<M, B>(WireType, &mut M, &mut B) -> Result<(), DecodeError> where\nM: Message, B: Buf","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":250},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":40589,"byte_end":40604,"line_start":795,"line_end":795,"column_start":12,"column_end":27},"name":"encode_repeated","qualname":"::encoding::message::encode_repeated","value":"pub fn encode_repeated<M, B>(u32, &[M], &mut B) where M: Message, B: BufMut","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":253},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":40798,"byte_end":40812,"line_start":805,"line_end":805,"column_start":12,"column_end":26},"name":"merge_repeated","qualname":"::encoding::message::merge_repeated","value":"pub fn merge_repeated<M, B>(WireType, &mut Vec<M>, &mut B)\n-> Result<(), DecodeError> where M: Message + Default, B: Buf","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":256},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":41229,"byte_end":41240,"line_start":822,"line_end":822,"column_start":12,"column_end":23},"name":"encoded_len","qualname":"::encoding::message::encoded_len","value":"pub fn encoded_len<M>(u32, &M) -> usize where M: Message","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":41208,"byte_end":41217,"line_start":821,"line_end":821,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":258},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":41451,"byte_end":41471,"line_start":831,"line_end":831,"column_start":12,"column_end":32},"name":"encoded_len_repeated","qualname":"::encoding::message::encoded_len_repeated","value":"pub fn encoded_len_repeated<M>(u32, &[M]) -> usize where M: Message","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":41430,"byte_end":41439,"line_start":830,"line_end":830,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":262},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":47994,"byte_end":48002,"line_start":1029,"line_end":1029,"column_start":9,"column_end":17},"name":"hash_map","qualname":"::encoding::hash_map","value":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","parent":null,"children":[{"krate":0,"index":591},{"krate":0,"index":594},{"krate":0,"index":595},{"krate":0,"index":597},{"krate":0,"index":598},{"krate":0,"index":606},{"krate":0,"index":612},{"krate":0,"index":617},{"krate":0,"index":625},{"krate":0,"index":632}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":263},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":48035,"byte_end":48044,"line_start":1033,"line_end":1033,"column_start":9,"column_end":18},"name":"btree_map","qualname":"::encoding::btree_map","value":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","parent":null,"children":[{"krate":0,"index":638},{"krate":0,"index":641},{"krate":0,"index":642},{"krate":0,"index":644},{"krate":0,"index":645},{"krate":0,"index":653},{"krate":0,"index":659},{"krate":0,"index":664},{"krate":0,"index":672},{"krate":0,"index":679}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":291},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","byte_start":540,"byte_end":563,"line_start":23,"line_end":23,"column_start":8,"column_end":31},"name":"encode_length_delimiter","qualname":"::encode_length_delimiter","value":"pub fn encode_length_delimiter<B>(usize, &mut B) -> Result<(), EncodeError>\nwhere B: BufMut","parent":null,"children":[],"decl_id":null,"docs":" Encodes a length delimiter to the buffer.","sig":null,"attributes":[{"value":"/ Encodes a length delimiter to the buffer.","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","byte_start":315,"byte_end":360,"line_start":17,"line_end":17,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","byte_start":361,"byte_end":364,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ See [Message.encode_length_delimited] for more info.","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","byte_start":365,"byte_end":421,"line_start":19,"line_end":19,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","byte_start":422,"byte_end":425,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ An error will be returned if the buffer does not have sufficient capacity to encode the","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","byte_start":426,"byte_end":517,"line_start":21,"line_end":21,"column_start":1,"column_end":92}},{"value":"/ delimiter.","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","byte_start":518,"byte_end":532,"line_start":22,"line_end":22,"column_start":1,"column_end":15}}]},{"kind":"Function","id":{"krate":0,"index":293},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","byte_start":1146,"byte_end":1166,"line_start":41,"line_end":41,"column_start":8,"column_end":28},"name":"length_delimiter_len","qualname":"::length_delimiter_len","value":"pub fn length_delimiter_len(usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the encoded length of a length delimiter.","sig":null,"attributes":[{"value":"/ Returns the encoded length of a length delimiter.","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","byte_start":906,"byte_end":959,"line_start":37,"line_end":37,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","byte_start":960,"byte_end":963,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ Applications may use this method to ensure sufficient buffer capacity before calling","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","byte_start":964,"byte_end":1052,"line_start":39,"line_end":39,"column_start":1,"column_end":89}},{"value":"/ `encode_length_delimiter`. The returned size will be between 1 and 10, inclusive.","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","byte_start":1053,"byte_end":1138,"line_start":40,"line_end":40,"column_start":1,"column_end":86}}]},{"kind":"Function","id":{"krate":0,"index":294},"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","byte_start":1821,"byte_end":1844,"line_start":56,"line_end":56,"column_start":8,"column_end":31},"name":"decode_length_delimiter","qualname":"::decode_length_delimiter","value":"pub fn decode_length_delimiter<B>(B) -> Result<usize, DecodeError> where\nB: IntoBuf","parent":null,"children":[],"decl_id":null,"docs":" Decodes a length delimiter from the buffer.","sig":null,"attributes":[{"value":"/ Decodes a length delimiter from the buffer.","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","byte_start":1234,"byte_end":1281,"line_start":45,"line_end":45,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","byte_start":1282,"byte_end":1285,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ This method allows the length delimiter to be decoded independently of the message, when the","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","byte_start":1286,"byte_end":1382,"line_start":47,"line_end":47,"column_start":1,"column_end":97}},{"value":"/ message is encoded with [Message.encode_length_delimited].","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","byte_start":1383,"byte_end":1445,"line_start":48,"line_end":48,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","byte_start":1446,"byte_end":1449,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ An error may be returned in two cases:","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","byte_start":1450,"byte_end":1492,"line_start":50,"line_end":50,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","byte_start":1493,"byte_end":1496,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/  * If the supplied buffer contains fewer than 10 bytes, then an error indicates that more","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","byte_start":1497,"byte_end":1590,"line_start":52,"line_end":52,"column_start":1,"column_end":94}},{"value":"/    input is required to decode the full delimiter.","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","byte_start":1591,"byte_end":1645,"line_start":53,"line_end":53,"column_start":1,"column_end":55}},{"value":"/  * If the supplied buffer contains more than 10 bytes, then the buffer contains an invalid","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","byte_start":1646,"byte_end":1740,"line_start":54,"line_end":54,"column_start":1,"column_end":95}},{"value":"/    delimiter, and typically the buffer should be considered corrupt.","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","byte_start":1741,"byte_end":1813,"line_start":55,"line_end":55,"column_start":1,"column_end":73}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/error.rs","byte_start":3325,"byte_end":3336,"line_start":23,"line_end":23,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":17},{"krate":0,"index":19}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/error.rs","byte_start":4036,"byte_end":4047,"line_start":47,"line_end":47,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":21}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/error.rs","byte_start":4352,"byte_end":4363,"line_start":57,"line_end":57,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":23}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/error.rs","byte_start":4468,"byte_end":4473,"line_start":63,"line_end":63,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":25}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/error.rs","byte_start":4926,"byte_end":4937,"line_start":80,"line_end":80,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/error.rs","byte_start":5457,"byte_end":5468,"line_start":100,"line_end":100,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":31}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/error.rs","byte_start":5749,"byte_end":5760,"line_start":111,"line_end":111,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":33}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/error.rs","byte_start":5913,"byte_end":5918,"line_start":117,"line_end":117,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":35}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/message.rs","byte_start":9605,"byte_end":9608,"line_start":124,"line_end":124,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":87}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/types.rs","byte_start":15481,"byte_end":15487,"line_start":246,"line_end":246,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":153},{"krate":0,"index":155},{"krate":0,"index":157},{"krate":0,"index":158}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/types.rs","byte_start":16211,"byte_end":16214,"line_start":279,"line_end":279,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":160},{"krate":0,"index":162},{"krate":0,"index":164},{"krate":0,"index":165}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":22738,"byte_end":22746,"line_start":202,"line_end":202,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":210}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/lib.rs","byte_start":115,"byte_end":123,"line_start":8,"line_end":8,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":173}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/error.rs","byte_start":3325,"byte_end":3336,"line_start":23,"line_end":23,"column_start":6,"column_end":17},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":298},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/error.rs","byte_start":4036,"byte_end":4047,"line_start":47,"line_end":47,"column_start":23,"column_end":34},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":298},"to":{"krate":2,"index":9560}},{"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/error.rs","byte_start":4352,"byte_end":4363,"line_start":57,"line_end":57,"column_start":23,"column_end":34},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":298},"to":{"krate":1,"index":2338}},{"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/error.rs","byte_start":4468,"byte_end":4473,"line_start":63,"line_end":63,"column_start":32,"column_end":37},"kind":{"Impl":{"id":3}},"from":{"krate":1,"index":3816},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/error.rs","byte_start":4926,"byte_end":4937,"line_start":80,"line_end":80,"column_start":6,"column_end":17},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":312},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/error.rs","byte_start":5457,"byte_end":5468,"line_start":100,"line_end":100,"column_start":23,"column_end":34},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":312},"to":{"krate":2,"index":9560}},{"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/error.rs","byte_start":5749,"byte_end":5760,"line_start":111,"line_end":111,"column_start":23,"column_end":34},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":312},"to":{"krate":1,"index":2338}},{"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/error.rs","byte_start":5913,"byte_end":5918,"line_start":117,"line_end":117,"column_start":32,"column_end":37},"kind":{"Impl":{"id":7}},"from":{"krate":1,"index":3816},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/message.rs","byte_start":6236,"byte_end":6241,"line_start":11,"line_end":11,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":2,"index":9553},"to":{"krate":0,"index":60}},{"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/message.rs","byte_start":6244,"byte_end":6248,"line_start":11,"line_end":11,"column_start":28,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":3019},"to":{"krate":0,"index":60}},{"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/message.rs","byte_start":6251,"byte_end":6255,"line_start":11,"line_end":11,"column_start":35,"column_end":39},"kind":"SuperTrait","from":{"krate":2,"index":3031},"to":{"krate":0,"index":60}},{"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/message.rs","byte_start":9605,"byte_end":9608,"line_start":124,"line_end":124,"column_start":21,"column_end":24},"kind":{"Impl":{"id":8}},"from":{"krate":5,"index":315},"to":{"krate":0,"index":60}},{"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/types.rs","byte_start":15481,"byte_end":15487,"line_start":246,"line_end":246,"column_start":18,"column_end":24},"kind":{"Impl":{"id":16}},"from":{"krate":5,"index":7617},"to":{"krate":0,"index":60}},{"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/types.rs","byte_start":16211,"byte_end":16214,"line_start":279,"line_end":279,"column_start":18,"column_end":21},"kind":{"Impl":{"id":17}},"from":{"krate":5,"index":7080},"to":{"krate":0,"index":60}},{"span":{"file_name":"/home/newslab/.cargo/registry/src/github.com-1ecc6299db9ec823/prost-0.5.0/src/encoding.rs","byte_start":22738,"byte_end":22746,"line_start":202,"line_end":202,"column_start":6,"column_end":14},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":327},"to":{"krate":4294967295,"index":4294967295}}]}